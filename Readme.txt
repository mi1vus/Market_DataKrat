Приложение Market 0.1 написано в соответствии с шаблоном проектирования MVC.
В качестве сервера БД использован MS SQL Server 2014
Приложение написано на .NET Framework 4.0 с использванием технологии Entity Framework 6.1.3
Для развертывания приложения необходимо развернуть исходный бэкап базы данных на любом MS SQL сервере, 
выполнить скрипт из папки Scripts солюшена на развернутую базу данных и изменить connectionString в app.config приложения, 
прописав там SQL сервер и данные учетной записи пользователя в секции

\<connectionStrings>
	\<add name="MarketConnectionString" connectionString="Data Source=MILVUS-ПК;Initial Catalog=Market;Timeout=10000;Persist Security Info=True;User ID=sa;Password=sa" providerName="System.Data.SqlClient" />
\</connectionStrings>

После этого можно собрать проект и запустить .exe файл.
Замечена одна особенность в производительности приложения, при первом поиске товара или построении отчета строится дерево запросов
, поэтому это занимает некоторое время, повторные запросы выполняются уже с закэшированными деревьями и поэтому не вызывают неудобства, как вариант можно
выполнять эит запросы при запуске приложеня тогда пользователь не будет замечать заминку при первом запуске.

ответы на вопросы:
a.	Какие изменения потребуется внести в код программы в случае замены MS SQL Server на другую СУБД?
b.	Какие изменения потребуется внести в код программы в случае замены интерфейса пользователя Windows Forms на текстовый интерфейс консольного приложения?
c.	Как гарантируется целостность сохраняемых в базу данных чеков при одновременной работе нескольких экземпляров приложения?

a) Если новая БД поддерживается Entity Framework 6.1.3 то нужно просто изменить строку подключения и настройки в файле конфигурации. Если нет, то все равно 
останется нетронутым и логика приложения и модели и View-ха, нужно будет только написать методы построения объектной модели по данным из БД в контроллере.
b) При переходе на другую View-ху нужно будет только изменить проект MarketViews, остальные проекты останутся без изменений
c) Целостность данных и атомарность операций гарантирует Entity Framework 6.1.3, все сохраняемые данные либо сохраняются полностью либо не сохраняются вообще
единственная замеченная проблема - это поддержание сквозной нумерации чеков, для ее решения использутеся системный объект - мютекс, через который при 
вычислении следующего порядкового номена чека и сохнранении чека в БД блокируются остальные экземпляры приложения. Таким образом осуществляется 
межпроцесное взаимодействие.